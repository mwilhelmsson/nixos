;;  **
;; ** Widgets config for EWW
;; ** Created by : @adi1090x
;; ** Modified by : Dusty

;;  Profile vars 
(defvar IMAGE "images/fox.png")
(defvar NAME "Sherub Thakur")
(defpoll UNAME :interval "5m"  "whoami")

;;  System vars 
(defpoll HOST :interval "5s"  "hostname")
(defpoll CPU_USAGE :interval "1s"  "~/.config/eww/scripts/sys_info --cpu")
(defpoll MEM_USAGE :interval "1s"  "~/.config/eww/scripts/sys_info --mem")
(defpoll BLIGHT :interval "1s"  "~/.config/eww/scripts/sys_info --blight")
(defpoll BATTERY :interval "5s"  "~/.config/eww/scripts/sys_info --bat")

;;  Time vars 
(defpoll DAY :interval "1m"  "date +\"%A\"")
(defpoll TIME :interval "10s" "date +\"%I:%M %p\"")

;;  Uptime vars 
(defpoll UPHOUR :interval "5s"  "uptime -p | awk '{print $2 \" \" $3}' | sed 's/,//g'")
(defpoll UPMIN :interval "5s"  "uptime -p | awk '{print $4 \" \" $5}'")

;;  Music vars 
(defpoll SONG :interval "1s"  "custom-browsermediacontrol --display song")
(defpoll ARTIST :interval "1s"  "custom-browsermediacontrol --display artist")
(defpoll STATUS_ICON :interval "1s"  "custom-browsermediacontrol --display status-icon")
(defpoll CURRENT :interval "1s"  "custom-browsermediacontrol --display position")
(defpoll COVER :interval "1s"  "custom-browsermediacontrol --display cover")

;; Weather vars
(defpoll ICON :interval "15m"  "~/.config/eww/scripts/weather_info --icon")
(defpoll STAT :interval "15m"  "~/.config/eww/scripts/weather_info --stat")
(defpoll TEMP :interval "15m"  "~/.config/eww/scripts/weather_info --temp")
(defpoll HEX :interval "15m"  "~/.config/eww/scripts/weather_info --hex")
(defpoll QUOTE :interval "15m"  "~/.config/eww/scripts/weather_info --quote")
(defpoll QUOTE2 :interval "15m"  "~/.config/eww/scripts/weather_info --quote2")

;;  Apps vars 
(defpoll MAILS :interval "5m"  "~/.config/eww/scripts/mails")

;;  Files vars 
(defpoll FREE :interval "5s"  "df -h / | awk '{print $4}' | tail -n 1 | sed 's/G/GB/'")

    

;;  ******************************************************************************** 

    

;;  background 
(defwidget bg [] 
    (box :class "bg"))

;;  profile 
(defwidget user [] 
    (box :class "genwin" :orientation "v" :spacing 20 :space-evenly "false"  
        (box :class "face" :halign "center" :style "background-image: url('${IMAGE});")
        (label :class "fullname" :halign "center" :wrap "true" :limit-width 25 :text NAME)
        (label :class "username" :halign "center" :wrap "true" :limit-width 25 :text UNAME)))

;;  system 
(defwidget system [] 
    (box :class "genwin"  
        (box :orientation "v" :spacing 25 :halign "center" :valign "center" :space-evenly "false"  
            (box :class "cpu_bar" :orientation "h" :spacing 20 :space-evenly "false"  
                (label :class "iconcpu" :text "")
                (scale :min 0 :max 100 :value CPU_USAGE :active "false"))
            (box :class "mem_bar" :orientation "h" :spacing 20 :space-evenly "false"  
                (label :class "iconmem" :text "")
                (scale :min 0 :max 100 :value MEM_USAGE :active "false"))
            (box :class "bright_bar" :orientation "h" :spacing 20 :space-evenly "false"  
                (label :class "iconbright" :text "")
                (scale :min 0 :max 100 :value BLIGHT :active "false"))
            (box :class "bat_bar" :orientation "h" :spacing 20 :space-evenly "false"  
                (label :class "iconbat" :text "")
                (scale :min 0 :max 100 :value BATTERY :active "false")))))

;;  clock 
(defwidget clock [] 
    (box :class "genwin"
        (box :orientation "v" :halign "center" :valign "center"  
            (label :class "clock_time" :halign "center" :text TIME)
            (label :class "clock_day" :halign "center" :text DAY))))

;;  uptime 
(defwidget uptime [] 
    (box :class "genwin" 
        (box :orientation "h" :halign "center" :spacing 30 :space-evenly "false"  
            (label :class "icontimer" :valign "center" :text "祥")
            (box :orientation "v" :valign "center" :spacing 0 :space-evenly "false"  
                (label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text UPHOUR)
                (label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text UPMIN)))))

;;  Music 
(defwidget music [] 
    (box :class "genwin" :orientation "h" :space-evenly "false"  
    ;; FIXME: Unable to see the album art
        (box :class "album_art" :style
            "background-image: url('/home/sherub/Pictures/backgrounds/tokyonight/BirdOneDarker.png');")
        ;; (box :class "album_art"  :style "background-image: url('${COVER}');")
        (box :orientation "v" :valign "center" :spacing 29 :space-evenly "false"  
            (label :halign "center" :class "song" :wrap "true" :text SONG)
            (label :halign "center" :class "artist" :wrap "true" :text ARTIST)
            (box :orientation "h" :spacing 15 :halign "center" :space-evenly "true"  
                (button :class "btn_prev" :onclick "custom-browsermediacontrol --prev" "玲")
                (button :class "btn_play" :onclick "custom-browsermediacontrol --playpause" STATUS_ICON)
                (button :class "btn_next" :onclick "custom-browsermediacontrol --next" "怜"))
            (box :class "music_bar" :halign "center"  
            ;; FIXME: This does not work!
                (scale :onscroll "mpc -q seek +1" :min 0 :active "true" :max 100 :value CURRENT)))))

;;  github 
(defwidget github [] 
    (box :class "github"  
        (button :class "iconweb" :onclick "~/.config/eww/scripts/open_links --gh" "")))

;;  reddit 
(defwidget reddit [] 
    (box :class "reddit"  
        (button :class "iconweb" :onclick "~/.config/eww/scripts/open_links --rd" "樓")))

;;  twitter 
(defwidget twitter [] 
    (box :class "twitter"  
        (button :class "iconweb" :onclick "~/.config/eww/scripts/open_links --tw" "")))

;;  youtube 
(defwidget youtube [] 
    (box :class "youtube"  
        (button :class "iconweb" :onclick "~/.config/eww/scripts/open_links --yt" "")))

;;  mail 
(defwidget mail [] 
    (box :class "mail" 
        (box :orientation "h" :halign "center" :spacing 20 :space-evenly "false"  
            (button :class "iconmail" :onclick "~/.config/eww/scripts/open_links --mail" "")
            (box :class "mailbox" :space-evenly "false"  
                (button :class "label_mails" :onclick "~/.config/eww/scripts/open_links --mail" MAILS)))))

;;  weather 
(defwidget weather [] 
    (box :class "genwin" 
        (box :orientation "v" :spacing 5 :space-evenly "false"  
            (box :orientation "h"  
                (label :class "iconweather" :halign "start" :style "color: ${HEX};" :text ICON)
                (label :class "label_temp" :halign "end" :text TEMP))
            (box :orientation "v" :spacing 5 :halign "center" :space-evenly "false"  
                (label :class "label_stat" :text STAT)
                (label :class "label_quote" :text QUOTE)
                (label :class "label_quote" :text QUOTE2)))))

;;  apps 
(defwidget apps [] 
    (box :class "genwin" :orientation "v" :space-evenly "false"  
        (box :class "appbox" :orientation "h" :space-evenly "false"  
            (button :style "background-image: url('images/icons/vivaldi.svg');" :class "app_vivaldi" :onclick "~/.config/eww/scripts/open_apps --vd")
            (button :style "background-image: url('images/icons/telegram.svg');" :class "app_telegram" :onclick "~/.config/eww/scripts/open_apps --tg")
            (button :style "background-image: url('images/icons/discord.svg');" :class "app_discord" :onclick "~/.config/eww/scripts/open_apps --dc"))
                        (box :class "appbox" :orientation "h" :space-evenly "false"  
            (button :style "background-image: url('images/icons/terminal.svg');" :class "app_terminal" :onclick "~/.config/eww/scripts/open_apps --tr")
            (button :style "background-image: url('images/icons/files.svg');" :class "app_files" :onclick "~/.config/eww/scripts/open_apps --fm")
            (button :style "background-image: url('images/icons/geany.svg');" :class "app_geany" :onclick "~/.config/eww/scripts/open_apps --ge"))
                        (box :class "appbox" :orientation "h" :space-evenly "false"  
            (button :style "background-image: url('images/icons/code.svg');" :class "app_code" :onclick "~/.config/eww/scripts/open_apps --cd")
            (button :style "background-image: url('images/icons/gimp.svg');" :class "app_gimp" :onclick "~/.config/eww/scripts/open_apps --gp")
            (button :style "background-image: url('images/icons/virtualbox.svg');" :class "app_vbox" :onclick "~/.config/eww/scripts/open_apps --vb"))))

;;  power buttons 
(defwidget logout [] 
    (box :class "genwin"  
        (button :class "btn_logout" :onclick "killall xmonad-x86_64-linux" "☛")))
(defwidget sleep [] 
    (box :class "genwin"  
        (button :class "btn_sleep" :onclick "systemctl suspend" "⏾")))
(defwidget reboot [] 
    (box :class "genwin"
        (button :class "btn_reboot" :onclick "systemctl reboot" "↺")))
(defwidget poweroff [] 
    (box :class "genwin"  
        (button :class "btn_poweroff" :onclick "systemctl poweroff" "⏻")))

;;  folders 
(defwidget folders [] 
    (box :class "genwin" :orientation "v" :space-evenly "false"  
        (box :class "hddbox" :orientation "h" :space-evenly "false"  
            (box :space-evenly "false"  
                (button :class "hddicon" :onclick "~/.config/eww/scripts/open_apps --fm" ""))
            (label :class "fs_sep" :text "|")
            (box :space-evenly "false"  
                (label :class "hdd_label" :wrap "true" :limit-width 25 :text FREE)))
        (box :orientation "h" :space-evenly "false"  
            (button :class "iconfolder1" :onclick "~/.config/eww/scripts/open_folders --docs" "")
            (button :class "label_folder1" :onclick "~/.config/eww/scripts/open_folders --docs" "Documents"))
        (box :orientation "h" :space-evenly "false"  
            (button :class "iconfolder2" :onclick "~/.config/eww/scripts/open_folders --dl" "")
            (button :class "label_folder2" :onclick "~/.config/eww/scripts/open_folders --dl" "Downloads"))
        (box :orientation "h" :space-evenly "false"  
            (button :class "iconfolder3" :onclick "~/.config/eww/scripts/open_folders --music" "")
            (button :class "label_folder3" :onclick "~/.config/eww/scripts/open_folders --music" "Music"))
        (box :orientation "h" :space-evenly "false"  
            (button :class "iconfolder4" :onclick "~/.config/eww/scripts/open_folders --pics" "")
            (button :class "label_folder4" :onclick "~/.config/eww/scripts/open_folders --pics" "Pictures"))
        (box :orientation "h" :space-evenly "false"  
            (button :class "iconfolder5" :onclick "~/.config/eww/scripts/open_folders --cfg" "ﮛ")
            (button :class "label_folder5" :onclick "~/.config/eww/scripts/open_folders --cfg" "~/.config"))
        (box :orientation "h" :space-evenly "false"  
            (button :class "iconfolder6" :onclick "~/.config/eww/scripts/open_folders --local" "ﮛ")
            (button :class "label_folder6" :onclick "~/.config/eww/scripts/open_folders --local" "~/.local"))))



;;  ******************************************************************************** 

;;  background 
(defwindow background :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x 0 :y 0 :width "1360px" :height "768px") (bg))

;;  profile 
(defwindow profile :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "8%" :y "14%" :width "18%" :height "42%")
                        (user))

;;  system 
(defwindow system :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "8%" :y "58%" :width "18%" :height "28%")
                        (system))

;;  clock 
(defwindow clock :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "27%" :y "14%" :width "15%" :height "13%")
                        (clock))

;;  uptime 
(defwindow uptime :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "27%" :y "29%" :width "15%" :height "13%")
                        (uptime))

;;  music 
(defwindow music :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "27%" :y "44%" :width "31%" :height "28%")
                        (music))

;;  github 
(defwindow github :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "27%" :y "74%" :width "7%" :height "12%")
                        (github))

;;  reddit 
(defwindow reddit :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "35%" :y "74%" :width "7%" :height "12%")
                        (reddit))

;;  twitter 
(defwindow twitter :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "43%" :y "74%" :width "7%" :height "12%")
                        (twitter))

;;  youtube 
(defwindow youtube :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "51%" :y "74%" :width "7%" :height "12%")
                        (youtube))

;;  weather 
(defwindow weather :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "43%" :y "14%" :width "32%" :height "28%")
                        (weather))

;;  apps 
(defwindow apps :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "59%" :y "44%" :width "16%" :height "28%")
                        (apps))

;;  mail 
(defwindow mail :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "59%" :y "74%" :width "16%" :height "12%")
                        (mail))
;;  logout 
(defwindow logout :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "76%" :y "14%" :width "7%" :height "13%")
                        (logout))

;;  sleep 
(defwindow sleep :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "84%" :y "14%" :width "8%" :height "13%")
                        (sleep))

;;  reboot 
(defwindow reboot :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "76%" :y "29%" :width "7%" :height "13%")
                        (reboot))

;;  poweroff 
(defwindow poweroff :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "84%" :y "29%" :width "8%" :height "13%")
                        (poweroff))

;;  folders 
(defwindow folders :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x "76%" :y "44%" :width "16%" :height "42%")
                        (folders))
